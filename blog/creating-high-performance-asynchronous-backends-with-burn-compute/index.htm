<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="description"
    content="Developing new high-performance deep learning backends in Mabor has become remarkably easy, as it can be readily enhanced with advanced capabilities such as asynchronous computations, intelligent memory management, and autotuning mechanisms. The innovative Mabor-Compute crate lays the architectural foundation for in-house backends, effortlessly equipping them with advanced features to maximize efficiency.">
  <meta property="og:type" content="article">
  <meta property="og:title" content="Creating High Performance Asynchronous Backends With Mabor-Compute">
  <meta property="og:description"
    content="Developing new high-performance deep learning backends in Mabor has become remarkably easy, as it can be readily enhanced with advanced capabilities such as asynchronous computations, intelligent memory management, and autotuning mechanisms. The innovative Mabor-Compute crate lays the architectural foundation for in-house backends, effortlessly equipping them with advanced features to maximize efficiency.">
  <meta property="og:author" content="Louis Fortier-Dubois">
  <meta property="og:image" content="/_astro/blog4.B7B9XCkE_ZubgFQ.webp">
  <meta property="article:published_time" content="2023-11-07T18:00:00.000Z">
  <link rel="sitemap" href="../../sitemap-index.xml">
  <meta name="viewport" content="width=device-width">
  <link rel="icon" type="image/svg+xml" href="../../favicon.svg">
  <meta name="generator" content="Astro v5.10.1">
  <link rel="canonical" href="../../index.htm">
  <title>Creating High Performance Asynchronous Backends With Mabor-Compute</title>
  <script
    type="module">try { const t = window._paq = window._paq || []; t.push(["trackPageView"]), t.push(["enableLinkTracking"]), function () { t.push(["setTrackerUrl", "https://burndev.matomo.cloud/" + "matomo.php"]), t.push(["setSiteId", "1"]); const o = document, e = o.createElement("script"), c = o.getElementsByTagName("script")[0]; e.async = !0, e.src = "https://cdn.matomo.cloud/burndev.matomo.cloud/matomo.js", c?.parentNode?.insertBefore(e, c) }() } catch { }</script>
  <script type="text/partytown" src="../../gtag/js?id=G-SCQPPXXSJY"></script>
  <script type="text/partytown">(function(){const id = "G-SCQPPXXSJY";

    window.dataLayer = window.dataLayer || [];
    function gtag() {
      dataLayer.push(arguments);
    }

    gtag("js", new Date());

    gtag("config", id);
  })();</script>
  <link rel="stylesheet" href="../../_astro/_blog_.DvB2Xm2x.css">
  <link rel="stylesheet" href="../../_astro/_blog_.CLbeXEfv.css">
  <script>!(function (w, p, f, c) { if (!window.crossOriginIsolated && !navigator.serviceWorker) return; c = w[p] = Object.assign(w[p] || {}, { "lib": "/~partytown/", "debug": false }); c[f] = (c[f] || []).concat(["dataLayer.push"]) })(window, 'partytown', 'forward');/* Partytown 0.11.1 - MIT QwikDev */
    const t = { preserveBehavior: !1 }, e = e => { if ("string" == typeof e) return [e, t]; const [n, r = t] = e; return [n, { ...t, ...r }] }, n = Object.freeze((t => { const e = new Set; let n = []; do { Object.getOwnPropertyNames(n).forEach((t => { "function" == typeof n[t] && e.add(t) })) } while ((n = Object.getPrototypeOf(n)) !== Object.prototype); return Array.from(e) })()); !function (t, r, o, i, a, s, c, l, d, p, u = t, f) { function h() { f || (f = 1, "/" == (c = (s.lib || "/~partytown/") + (s.debug ? "debug/" : ""))[0] && (d = r.querySelectorAll('script[type="text/partytown"]'), i != t ? i.dispatchEvent(new CustomEvent("pt1", { detail: t })) : (l = setTimeout(v, (null == s ? void 0 : s.fallbackTimeout) || 1e4), r.addEventListener("pt0", w), a ? y(1) : o.serviceWorker ? o.serviceWorker.register(c + (s.swPath || "partytown-sw.js"), { scope: c }).then((function (t) { t.active ? y() : t.installing && t.installing.addEventListener("statechange", (function (t) { "activated" == t.target.state && y() })) }), console.error) : v()))) } function y(e) { p = r.createElement(e ? "script" : "iframe"), t._pttab = Date.now(), e || (p.style.display = "block", p.style.width = "0", p.style.height = "0", p.style.border = "0", p.style.visibility = "hidden", p.setAttribute("aria-hidden", !0)), p.src = c + "partytown-" + (e ? "atomics.js?v=0.11.1" : "sandbox-sw.html?" + t._pttab), r.querySelector(s.sandboxParent || "body").appendChild(p) } function v(n, o) { for (w(), i == t && (s.forward || []).map((function (n) { const [r] = e(n); delete t[r.split(".")[0]] })), n = 0; n < d.length; n++)(o = r.createElement("script")).innerHTML = d[n].innerHTML, o.nonce = s.nonce, r.head.appendChild(o); p && p.parentNode.removeChild(p) } function w() { clearTimeout(l) } s = t.partytown || {}, i == t && (s.forward || []).map((function (r) { const [o, { preserveBehavior: i }] = e(r); u = t, o.split(".").map((function (e, r, o) { var a; u = u[o[r]] = r + 1 < o.length ? u[o[r]] || (a = o[r + 1], n.includes(a) ? [] : {}) : (() => { let e = null; if (i) { const { methodOrProperty: n, thisObject: r } = ((t, e) => { let n = t; for (let t = 0; t < e.length - 1; t += 1)n = n[e[t]]; return { thisObject: n, methodOrProperty: e.length > 0 ? n[e[e.length - 1]] : void 0 } })(t, o); "function" == typeof n && (e = (...t) => n.apply(r, ...t)) } return function () { let n; return e && (n = e(arguments)), (t._ptf = t._ptf || []).push(o, arguments), n } })() })) })), "complete" == r.readyState ? h() : (t.addEventListener("DOMContentLoaded", h), t.addEventListener("load", h)) }(window, document, navigator, top, window.crossOriginIsolated);; (e => { e.addEventListener("astro:before-swap", e => { let r = document.body.querySelector("iframe[src*='/~partytown/']"); if (r) e.newDocument.body.append(r) }) })(document);</script>
</head>

<body
  class="flex flex-col text-primary-content default:sections:mx-auto [&#38;>nav]:order-last default:sections:max-w-[1500px] bg-[#0D1117]">
  <script type="module" src="../../_astro/Layout.astro_astro_type_script_index_0_lang.W5886xPT.js"></script>
  <style>
    astro-island,
    astro-slot,
    astro-static-slot {
      display: contents
    }
  </style>
  <script>(() => { var e = async t => { await (await t())() }; (self.Astro || (self.Astro = {})).load = e; window.dispatchEvent(new Event("astro:load")); })();</script>
  <script>(() => { var A = Object.defineProperty; var g = (i, o, a) => o in i ? A(i, o, { enumerable: !0, configurable: !0, writable: !0, value: a }) : i[o] = a; var d = (i, o, a) => g(i, typeof o != "symbol" ? o + "" : o, a); { let i = { 0: t => m(t), 1: t => a(t), 2: t => new RegExp(t), 3: t => new Date(t), 4: t => new Map(a(t)), 5: t => new Set(a(t)), 6: t => BigInt(t), 7: t => new URL(t), 8: t => new Uint8Array(t), 9: t => new Uint16Array(t), 10: t => new Uint32Array(t), 11: t => 1 / 0 * t }, o = t => { let [l, e] = t; return l in i ? i[l](e) : void 0 }, a = t => t.map(o), m = t => typeof t != "object" || t === null ? t : Object.fromEntries(Object.entries(t).map(([l, e]) => [l, o(e)])); class y extends HTMLElement { constructor() { super(...arguments); d(this, "Component"); d(this, "hydrator"); d(this, "hydrate", async () => { var b; if (!this.hydrator || !this.isConnected) return; let e = (b = this.parentElement) == null ? void 0 : b.closest("astro-island[ssr]"); if (e) { e.addEventListener("astro:hydrate", this.hydrate, { once: !0 }); return } let c = this.querySelectorAll("astro-slot"), n = {}, h = this.querySelectorAll("template[data-astro-template]"); for (let r of h) { let s = r.closest(this.tagName); s != null && s.isSameNode(this) && (n[r.getAttribute("data-astro-template") || "default"] = r.innerHTML, r.remove()) } for (let r of c) { let s = r.closest(this.tagName); s != null && s.isSameNode(this) && (n[r.getAttribute("name") || "default"] = r.innerHTML) } let p; try { p = this.hasAttribute("props") ? m(JSON.parse(this.getAttribute("props"))) : {} } catch (r) { let s = this.getAttribute("component-url") || "<unknown>", v = this.getAttribute("component-export"); throw v && (s += ` (export ${v})`), console.error(`[hydrate] Error parsing props for component ${s}`, this.getAttribute("props"), r), r } let u; await this.hydrator(this)(this.Component, p, n, { client: this.getAttribute("client") }), this.removeAttribute("ssr"), this.dispatchEvent(new CustomEvent("astro:hydrate")) }); d(this, "unmount", () => { this.isConnected || this.dispatchEvent(new CustomEvent("astro:unmount")) }) } disconnectedCallback() { document.removeEventListener("astro:after-swap", this.unmount), document.addEventListener("astro:after-swap", this.unmount, { once: !0 }) } connectedCallback() { if (!this.hasAttribute("await-children") || document.readyState === "interactive" || document.readyState === "complete") this.childrenConnectedCallback(); else { let e = () => { document.removeEventListener("DOMContentLoaded", e), c.disconnect(), this.childrenConnectedCallback() }, c = new MutationObserver(() => { var n; ((n = this.lastChild) == null ? void 0 : n.nodeType) === Node.COMMENT_NODE && this.lastChild.nodeValue === "astro:end" && (this.lastChild.remove(), e()) }); c.observe(this, { childList: !0 }), document.addEventListener("DOMContentLoaded", e) } } async childrenConnectedCallback() { let e = this.getAttribute("before-hydration-url"); e && await import(e), this.start() } async start() { let e = JSON.parse(this.getAttribute("opts")), c = this.getAttribute("client"); if (Astro[c] === void 0) { window.addEventListener(`astro:${c}`, () => this.start(), { once: !0 }); return } try { await Astro[c](async () => { let n = this.getAttribute("renderer-url"), [h, { default: p }] = await Promise.all([import(this.getAttribute("component-url")), n ? import(n) : () => () => { }]), u = this.getAttribute("component-export") || "default"; if (!u.includes(".")) this.Component = h[u]; else { this.Component = h; for (let f of u.split(".")) this.Component = this.Component[f] } return this.hydrator = p, this.hydrate }, e, this) } catch (n) { console.error(`[astro-island] Error hydrating ${this.getAttribute("component-url")}`, n) } } attributeChangedCallback() { this.hydrate() } } d(y, "observedAttributes", ["props"]), customElements.get("astro-island") || customElements.define("astro-island", y) } })();</script>
  <script>window._$HY || (e => { let t = e => e && e.hasAttribute && (e.hasAttribute("data-hk") ? e : t(e.host && e.host.nodeType ? e.host : e.parentNode));["click", "input"].forEach((o => document.addEventListener(o, (o => { if (!e.events) return; let s = t(o.composedPath && o.composedPath()[0] || o.target); s && !e.completed.has(s) && e.events.push([s, o]) })))) })(_$HY = { events: [], completed: new WeakSet, r: {}, fe() { } });</script>
  <!--xs--><astro-island uid="ZeT78n" data-solid-render-id="s1" component-url="/_astro/Navbar.xVaj7tQm.js"
    component-export="Navbar" renderer-url="/_astro/client.C-0b9Jot.js"
    props="{&quot;links&quot;:[0,{&quot;home&quot;:[0,{&quot;href&quot;:[0,&quot;/&quot;],&quot;title&quot;:[0,&quot;Home&quot;]}],&quot;getStarted&quot;:[0,{&quot;href&quot;:[0,&quot;/get-started&quot;],&quot;title&quot;:[0,&quot;Get Started&quot;],&quot;description&quot;:[0,&quot;Begin your journey&quot;]}],&quot;learn&quot;:[0,{&quot;href&quot;:[0,&quot;/learn&quot;],&quot;title&quot;:[0,&quot;Learn&quot;]}],&quot;blog&quot;:[0,{&quot;href&quot;:[0,&quot;/blog&quot;],&quot;title&quot;:[0,&quot;Blog&quot;]}],&quot;benchmarks&quot;:[0,{&quot;href&quot;:[0,&quot;/benchmarks/community-benchmarks&quot;],&quot;title&quot;:[0,&quot;Benchmarks&quot;]}]}]}"
    ssr="" client="load" opts="{&quot;name&quot;:&quot;Navbar&quot;,&quot;value&quot;:true}" await-children="">
    <nav data-hk="s10000"
      class="fixed left-1/2 top-[10px] z-30 h-[70px] w-[90%] max-w-[1200px] -translate-x-1/2 rounded-[100px] border border-white/10 bg-[#1E212A99] px-[30px] py-[20px] text-center shadow-[0px_10px_15px_3px_#5865F21A] backdrop-blur-2xl">
      <div class="flex flex-1 items-center justify-between gap-4">
        <div class="flex">
          <details class="group block hover:cursor-pointer lg:invisible lg:hidden" id="navbar-menu">
            <summary class="list-none px-2"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewbox="0 0 20 21"
                class="inline-block h-7 w-8 stroke-current group-open:hidden">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16">
                </path>
              </svg></summary>
            <div
              class="absolute left-[-10%] top-[-16px] h-[calc(100vh+16px)] w-[110vw] bg-[#1E212A99]/95 backdrop-blur-2xl">
              <div class="pt-10 pl-[calc(10%+30px)]"><svg xmlns="http://www.w3.org/2000/svg" fill="none"
                  viewbox="0 0 24 24" class="h-7 w-8 stroke-current group-open:block">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg></div>
              <ul class="mt-6 flex-col justify-evenly whitespace-nowrap">
                <li data-hk="s100010" class="border-white p-4 text-3xl"><a data-hk="s1000110" title="Home"
                    href="../../index.htm" aria-description=""
                    class="h-full px-3 p-1 text-btn primary-button font-bold text-light bg-transparent hover:bg-transparent hover:text-white block rounded-[5px] text-center  ">Home</a>
                </li>
                <li data-hk="s100012" class="border-white p-4 text-3xl"><a data-hk="s1000130" title="Get Started"
                    href="../../get-started/index.htm" aria-description="Begin your journey"
                    class="h-full px-3 p-1 text-btn primary-button font-bold text-light bg-transparent hover:bg-transparent hover:text-white block rounded-[5px] text-center  ">Get
                    Started</a></li>
                <li data-hk="s100014" class="border-white p-4 text-3xl"><a data-hk="s1000150" title="Learn"
                    href="../../learn/index.htm" aria-description=""
                    class="h-full px-3 p-1 text-btn primary-button font-bold text-light bg-transparent hover:bg-transparent hover:text-white block rounded-[5px] text-center  ">Learn</a>
                </li>
                <li data-hk="s100016" class="border-white p-4 text-3xl"><a data-hk="s1000170" title="Blog"
                    href="../index.htm" aria-description=""
                    class="h-full px-3 p-1 text-btn primary-button font-bold text-light bg-transparent hover:bg-transparent hover:text-white block rounded-[5px] text-center  ">Blog</a>
                </li>
                <li data-hk="s100018" class="border-white p-4 text-3xl"><a data-hk="s1000190" title="Benchmarks"
                    href="../../benchmarks/community-benchmarks/index.htm" aria-description=""
                    class="h-full px-3 p-1 text-btn primary-button font-bold text-light bg-transparent hover:bg-transparent hover:text-white block rounded-[5px] text-center  ">Benchmarks</a>
                </li>
              </ul>
            </div>
          </details>
          <div class="hidden lg:block"><astro-slot name="left">
              <div> <img src="../../_astro/burn-flame-white.D0NuVaYR_Z1ywDjw.svg" alt="Mabor Logo" loading="lazy"
                  decoding="async" fetchpriority="auto" width="95" height="30" class="mx-2 hidden sm:block"> </div>
            </astro-slot></div>
        </div>
        <div class="block lg:hidden"><astro-slot name="center"></astro-slot></div>
        <ul class="hidden max-w-[610px] flex-wrap justify-evenly whitespace-nowrap text-center align-middle lg:flex">
          <li data-hk="s100020"><a data-hk="s1000210" title="Home" href="../../index.htm" aria-description=""
              class="h-full px-3 p-1 text-btn primary-button font-bold text-light bg-transparent hover:bg-transparent hover:text-white block rounded-[5px] text-center  ">Home</a>
          </li>
          <li data-hk="s100022"><a data-hk="s1000230" title="Get Started" href="../../get-started/index.htm"
              aria-description="Begin your journey"
              class="h-full px-3 p-1 text-btn primary-button font-bold text-light bg-transparent hover:bg-transparent hover:text-white block rounded-[5px] text-center  ">Get
              Started</a></li>
          <li data-hk="s100024"><a data-hk="s1000250" title="Learn" href="../../learn/index.htm" aria-description=""
              class="h-full px-3 p-1 text-btn primary-button font-bold text-light bg-transparent hover:bg-transparent hover:text-white block rounded-[5px] text-center  ">Learn</a>
          </li>
          <li data-hk="s100026"><a data-hk="s1000270" title="Blog" href="../index.htm" aria-description=""
              class="h-full px-3 p-1 text-btn primary-button font-bold text-light bg-transparent hover:bg-transparent hover:text-white block rounded-[5px] text-center  ">Blog</a>
          </li>
          <li data-hk="s100028"><a data-hk="s1000290" title="Benchmarks"
              href="../../benchmarks/community-benchmarks/index.htm" aria-description=""
              class="h-full px-3 p-1 text-btn primary-button font-bold text-light bg-transparent hover:bg-transparent hover:text-white block rounded-[5px] text-center  ">Benchmarks</a>
          </li>
        </ul><!--$--><astro-slot name="right">
          <div class="flex flex-row gap-2 pr-3"> <a href="https://github.com/tracel-ai/burn" class="h-[30px]"> <svg
                fill="currentColor" width="30" height="30" viewbox="0 0 16 16">
                <path
                  d="M8 0a8 8 0 0 0-2.5 15.6c.4 0 .5-.2.5-.4v-1.5c-2 .4-2.5-.5-2.7-1 0-.1-.5-.9-.8-1-.3-.2-.7-.6 0-.6.6 0 1 .6 1.2.8.7 1.2 1.9 1 2.4.7 0-.5.2-.9.5-1-1.8-.3-3.7-1-3.7-4 0-.9.3-1.6.8-2.2 0-.2-.3-1 .1-2 0 0 .7-.3 2.2.7a7.4 7.4 0 0 1 4 0c1.5-1 2.2-.8 2.2-.8.5 1.1.2 2 .1 2.1.5.6.8 1.3.8 2.2 0 3-1.9 3.7-3.6 4 .3.2.5.7.5 1.4v2.2c0 .2.1.5.5.4A8 8 0 0 0 16 8a8 8 0 0 0-8-8">
                </path>
              </svg> </a> <a href="https://x.com/yourprofile" target="_blank" aria-label="X (Twitter)">
  <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 120 120" fill="none">
    <rect width="120" height="120" rx="24" fill="black"/>
    <path d="M81.6 31.2H68.88L58.08 45.36 47.28 31.2H34.56l17.28 22.8L34 88.8h12.72l10.56-13.92 10.56 13.92h12.72L62.4 54l19.2-22.8zM66.96 75.12l-8.88-11.76-8.88 11.76h-3.12L58.08 58.8l11.04 16.32h-2.16z" fill="white"/>
  </svg>
</a>
 </div>
        </astro-slot><!--/-->
      </div>
    </nav><!--astro:end-->
  </astro-island>
  <main>
    <div class="flex w-full justify-center pt-20">
      <div class="mx-3 mb-10 w-full max-w-5xl">
        <div class="mb-3">
          <p class="px-2 text-xl font-semibold"><a href="../../index.htm"
              class="hover:text-[#edc567]">home</a><span><span> · </span><a href="../index.htm"
                class="hover:text-[#edc567]">blog</a></span><span><span> · </span><a href="index.htm"
                class="hover:text-[#edc567]">creating-high-performance-asynchronous-backends-with-mabor-compute</a></span>
          </p>
        </div>
        <article class="blog rounded-lg bg-white/5 pt-4">
          <div>
            <h1 class="!text-[30px] sm:!text-[48px] font-bold !leading-normal px-3 sm:px-8">Creating High Performance
              Asynchronous Backends With Mabor-Compute</h1>
            <div class="px-3 pb-4 sm:px-8"><img class="mr-3 h-48 w-full rounded-lg object-cover object-top"
                src="../../_astro/blog4.B7B9XCkE_ZubgFQ.webp" alt="Space digital art generated by stable diffusion.">
            </div>
            <div class="flex px-3 sm:px-8">
              <div class="flex">
                <div class="i-mdi-clipboard-text-clock size-5"></div><span class="px-2 font-normal">Tue, Nov 7,
                  2023</span>
              </div><!--$--><a class="flex pl-2" href="https://x.com/louisfd94" target="_blank">
                <div class="i-mdi-account-edit size-5"></div><span class="px-2 font-normal">Louis Fortier-Dubois</span>
              </a><!--/-->
            </div>
          </div>
          <div class="px-3 pb-4 sm:px-8 text-base sm:text-lg leading-relaxed">
            <div class="my-6 border-t-2 border-[#181a1d]"></div><!--$-->
            <div>
              <h2>Introduction</h2>
              <p>
                When we first published the <code>Mabor-Wgpu</code> crate <span class="reference px-1">[<!--$--><a
                    class="hover:text-[#69b8e1]" href="#reference-1">1</a><!--/-->]</span>, our
                primary focus was on achieving great portability without sacrificing
                correctness, postponing efficiency optimizations a little. With the
                feedback we soon gathered from our users, we realized that the next
                priority was to reduce memory consumption. Indeed, at the early stage
                of the WGPU backend, there was never any reuse of the memory dedicated
                to tensors that were not used anymore. Each tensor allocated a new
                chunk of memory using the Graphics API, and when out of scope, the
                memory was deallocated. We did have our optimized in-place operations,
                as described in a previous blog
                <span class="reference px-1">[<!--$--><a class="hover:text-[#69b8e1]"
                    href="#reference-2">2</a><!--/-->]</span>,
                but using <i>new</i> tensors meant allocating and deallocating memory using
                the Graphics API, which remained very slow and costly. In addition, the
                deallocations were only called when many kernels were executed, often creating
                high memory peaks.
              </p>
              <p>
                With that in mind, we needed an intelligent reuse of memory that would
                reduce memory peaks and avoid allocations and deallocations when
                possible. After contemplating the idea of a major refactor of the
                Mabor-Wgpu crate, we figured we were going to face the same problems
                with all of our future <i>in-house</i> backends (which are self-contained
                within the Mabor project, as opposed to our third-party backends based on
                LibTorch <span class="reference px-1">[<!--$--><a class="hover:text-[#69b8e1]"
                    href="#reference-3">3</a><!--/-->]</span> or Candle <span class="reference px-1">[<!--$--><a
                    class="hover:text-[#69b8e1]" href="#reference-4">4</a><!--/-->]</span>
                ). So we decided to go for an abstract approach, relying heavily on Rust
                traits, to write all the logic that applies to every in-house backend in
                one place. Then the specifics of every backend can be encapsulated within
                the trait implementations.
              </p>
              <p>
                This is how we arrived at the concept of <code>Mabor-Compute</code> <span
                  class="reference px-1">[<!--$--><a class="hover:text-[#69b8e1]"
                    href="#reference-5">5</a><!--/-->]</span>. It is a crate
                within the Mabor project that abstracts many backend mechanics, even
                beyond memory management. Indeed, we have used this architecture to
                separate mutable environments from immutable ones, allow for
                transparent asynchronous kernel execution, and even automatic kernel
                selection, which we call autotuning.
              </p>
              <h2>Client-Server Architecture</h2>
              <p>
                In a high-performance backend, asynchronous computation is key for
                parallelization and responsiveness <span class="reference px-1">[<!--$--><a class="hover:text-[#69b8e1]"
                    href="#reference-6">6</a><!--/-->]</span>. Put another way, the
                actual computations on tensors in the model should not interfere with
                the normal execution of the framework. <code>Mabor-Compute</code>'s
                main purpose is to isolate the asynchronous computations from the rest
                of the software, using a client-server architecture like the one
                below:
              </p> <img class="w-full my-6 border-2 bg-white rounded" src="../../_astro/burncompute.nTE-AFle.svg">
              <p>
                In this figure, <i>squares</i> are concrete structs while <i>rounded squares</i> are abstract traits.
                The Compute Channel is implemented
                by either a mutex-locking channel, a multi-producer, single-consumer (MPSC)
                channel, or a RefCell channel, which is used in single-threaded applications,
                like when in a no-std environment. Memory Management is implemented by
                the Simple Memory Management strategy (which may be switched easily to
                other strategies once they exist).
              </p>
              <p>
                Finally, the Compute Server and the Storage must be implemented in
                every backend based on <code>Mabor-Compute</code>. In our WGPU backend,
                the server encapsulates WGPU concepts such as Command Encoders, Queues
                and Compute Pipelines, while the storage encapsulates the WGPU buffers <span
                  class="reference px-1">[<!--$--><a class="hover:text-[#69b8e1]"
                    href="#reference-7">7</a><!--/-->]</span>.
              </p>
              <p>
                As you may have noticed, we have also added an arrow going into the
                Compute Client to emphasize that using Mabor-Compute is done through
                calls to the client, which has a simple API:
              </p>
              <ul class="list-disc px-8 pb-8">
                <li> <span class="font-bold">Empty:</span> allocates a memory space of a given
                  size, and returns a handle to this space;
                </li>
                <li> <span class="font-bold">Create:</span> similar to empty but filling the
                  space with given data;
                </li>
                <li> <span class="font-bold">Read:</span> returns the data at a given handle;
                </li>
                <li> <span class="font-bold">Execute:</span> given a kernel and handles to
                  inputs and outputs of the kernel, asks the server to run the kernel;
                </li>
                <li> <span class="font-bold">Sync:</span> waits for all asynchronous executions
                  to be over;
                </li>
                <li> <span class="font-bold">Execute_autotune:</span> see Autotune section.
                </li>
              </ul>
              <p>
                When implementing operations for a backend, a few calls to the client
                suffice for the memory to be automatically handled intelligently.
              </p>
              <h2>Memory Management</h2>
              <p>
                Although we have written the Memory Management as a trait, we do not
                ask that the backend defines its own struct for it (although it
                could). Indeed, we already provide what we call the Simple Memory
                Management Strategy, which can be used transparently on any backend
                that leverages Mabor-Compute.
              </p>
              <h3>Concepts</h3>
              <p>
                Before we explain the memory management algorithms in details, let us
                define some concepts:
              </p>
              <ul class="list-disc font-medium px-8 pb-8">
                <li> <span class="font-bold">Allocating</span> memory means asking the storage
                  to reserve actual memory space for data. In WGPU, it means creating a
                  whole new buffer.
                </li>
                <li> <span class="font-bold">Deallocating</span> memory means freeing that
                  memory, so that no part of the code should point to it.
                </li>
                <li>
                  A <span class="font-bold">chunk</span> of memory is a contiguous, fixed-size
                  region of memory that was reserved at once during one allocation.
                </li>
                <li>
                  A <span class="font-bold">slice</span> of memory is a portion of a chunk,
                  defined by a starting index over the chunk and a size.
                </li>
                <li>
                  A <span class="font-bold">free chunk</span> is a chunk which is not used
                  by any tensor or any slice. It is important to distinguish between a
                  free chunk, and deallocated memory. The former still takes place in memory,
                  although it is useless if not reused cleverly.
                </li>
                <li>
                  A <span class="font-bold">free slice</span> is, similarly, a slice which
                  is not used by any tensor. </li>
                <li> <span class="font-bold">Reserving</span> memory means finding a place
                  for new data, either as a chunk or a slice, with either new allocation
                  or reuse.
                </li>
              </ul>
              <p>We also offer two sub-strategies:</p>
              <ul class="list-disc font-medium px-8 pb-8">
                <li>
                  The <span class="font-bold">deallocation strategy</span> allows us to
                  configure how often we should go through the process of converting free
                  chunks to deallocated memory. It can be either every <i>n</i>
                  memory reserves (which we call Deallocation period in the Benchmarks
                  section), every <i>n</i> seconds (unavailable in no-std environment),
                  or simply never. Remember, never deallocating does not mean that we are
                  always allocating new chunks for each new tensor because free chunks
                  can be reused before being deallocated.
                </li>
                <li>
                  The <span class="font-bold">slice strategy</span> allows us to configure
                  in what setting we can use a slice over a chunk. Suppose we have a free
                  chunk of 1,000 bytes; then we will need two contiguous spaces of 500
                  bytes each. It would make sense to reuse the chunk with two slices. But
                  consider another scenario where we have first a very small tensor of
                  10 bytes, followed by a new 1,000 bytes tensor. If we are not careful,
                  then the 10 bytes tensor may take a slice over the chunk, leaving only
                  990 bytes of memory, which will not be enough for the new 1,000 bytes
                  tensor, and we will need to allocate more memory. The
                  <span class="font-bold">slice ratio</span> in the Benchmarks section
                  is the fraction of a chunk's length that a slice must have in order to
                  be used on this chunk.
                </li>
              </ul>
              <h3>Memory Reserve Algorithm</h3>
              <p>
                The algorithm for reserving memory takes as input a simple integer
                representing the size of the tensor for which memory is needed.
              </p>
              <p>
                It first begins by searching through all allocated chunks, discarding
                those that are not free or too small. If it finds a free chunk of
                exactly the same size (which may happen rather often in some
                predictable scenarios), it stops the search and uses it.
              </p>
              <p>
                If no exact chunk exists, it will fall back on creating a new slice on
                the smallest chunk among all chunks that are free and can accept
                slices (depending on the slice strategy). Only then, if no such chunk
                exists, a new chunk will be allocated, with the exact needed size.
              </p>
              <h3>Cleanup Algorithm</h3>
              <p>How do we know if slices and chunks are free?</p>
              <p>
                We leverage Rust's reference counting. Indeed, we know that a chunk is
                free if no tensor nor slice points towards it. Because it will still
                be held in the memory management, it is therefore free when the strong
                count is exactly 1. On the other hand, a slice should be free when no
                tensor points towards it, but it will still be held by both the memory
                management and the chunk on which it lies. Therefore, a slice is free
                if its strong count is 2.
              </p>
              <p>
                Because free slices are trivial to delete, as we only need to delete
                the slice ID from the memory management and the underlying chunk, we
                delete them at every new memory reservation. The deletion of free
                chunks simply depends on the deallocation strategy.
              </p>
              <h3>Benchmarks</h3>
              <p>
                This simple strategy is already enough to lead to remarkable
                improvements.
              </p>
              <p>
                Our benchmarks are done on an NVIDIA graphics card. They compare the
                peak memory consumption attained for two different models (
                <i>static convolution network</i> and <i>dynamic transformer encoder</i>
                ). We have run the benchmarks on both our previous WGPU implementation
                (Mabor v0.9.0) and on the new WGPU implementation, based on Mabor-Compute.
                We also compare ourselves with the reference LibTorch, which is highly
                optimized for CUDA devices.
              </p>
              <div class="w-full overflow-auto px-6 pb-8">
                <div class="w-full px-6 py-2 text-center text-xl font-bold">Benchmark: Static Convolution Network</div>
                <table class="w-full">
                  <thead>
                    <tr>
                      <th class="border border-[#586473] bg-[#1f2835] p-2 text-center">
                        <div>
                          <div class="font-thin">Backend</div>
                        </div>
                      </th>
                      <th class="border border-[#586473] bg-[#1f2835] p-2 text-center">
                        <div>
                          <div class="font-thin">Deallocation</div>
                          <div class="font-thin">Period</div>
                        </div>
                      </th>
                      <th class="border border-[#586473] bg-[#1f2835] p-2 text-center">
                        <div>
                          <div class="font-thin">Slice</div>
                          <div class="font-thin">Ratio</div>
                        </div>
                      </th>
                      <th class="border border-[#586473] bg-[#1f2835] p-2 text-center">
                        <div>
                          <div class="font-thin">Max GPU</div>
                          <div class="font-thin">Memory</div>
                        </div>
                      </th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">WGPU - v0.9.0</span>
                      </td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">-</span></td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">-</span></td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">290 MiB</span></td>
                    </tr>
                    <tr>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">WGPU</span></td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">1000</span></td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">0.9</span></td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">154 MiB</span></td>
                    </tr>
                    <tr>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">WGPU</span></td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">128</span></td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">0.8</span></td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-bold">146 MiB</span></td>
                    </tr>
                    <tr>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">WGPU</span></td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">Never</span></td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">0.9</span></td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-bold">146 MiB</span></td>
                    </tr>
                    <tr>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">LibTorch</span></td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">-</span></td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">-</span></td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">264 MiB</span></td>
                    </tr>
                  </tbody>
                </table><!--$-->
                <div class="w-full px-6 py-2 text-center font-normal font-serif">The peak amount of memory attained by
                  different backend configurations using a simple ConvNet trained on images. </div><!--/-->
              </div>
              <div class="w-full overflow-auto px-6 pb-8">
                <div class="w-full px-6 py-2 text-center text-xl font-bold">Benchmark: Dynamic Transformer Encoder</div>
                <table class="w-full">
                  <thead>
                    <tr>
                      <th class="border border-[#586473] bg-[#1f2835] p-2 text-center">
                        <div>
                          <div class="font-thin">Backend</div>
                        </div>
                      </th>
                      <th class="border border-[#586473] bg-[#1f2835] p-2 text-center">
                        <div>
                          <div class="font-thin">Deallocation</div>
                          <div class="font-thin">Period</div>
                        </div>
                      </th>
                      <th class="border border-[#586473] bg-[#1f2835] p-2 text-center">
                        <div>
                          <div class="font-thin">Slice</div>
                          <div class="font-thin">Ratio</div>
                        </div>
                      </th>
                      <th class="border border-[#586473] bg-[#1f2835] p-2 text-center">
                        <div>
                          <div class="font-thin">Max GPU</div>
                          <div class="font-thin">Memory</div>
                        </div>
                      </th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">WGPU - v0.9.0</span>
                      </td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">-</span></td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">-</span></td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">3723 MiB</span></td>
                    </tr>
                    <tr>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">WGPU</span></td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">1000</span></td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">0.9</span></td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">3229 MiB</span></td>
                    </tr>
                    <tr>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">WGPU</span></td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">128</span></td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">0.8</span></td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-bold">2234 MiB</span></td>
                    </tr>
                    <tr>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">LibTorch</span></td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">-</span></td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-thin">-</span></td>
                      <td class="border border-[#586473] p-2 text-center"><span class="font-bold">2232 MiB</span></td>
                    </tr>
                  </tbody>
                </table><!--$-->
                <div class="w-full px-6 py-2 text-center font-normal font-serif">The peak amount of memory attained by
                  different backend configurations using a Transformer Encoder trained on text with different sequence
                  lengths. The 'Never' deallocation period is not shown as it is unusable, leading to memory exhaustion.
                </div><!--/-->
              </div>
              <p>
                As we can see, in both models, before Mabor-Compute, the memory usage
                of WGPU was always worse than LibTorch's. For static graphs, our
                simple memory management strategy is already very effective, dividing
                the memory use by 2. In this specific situation, we are already better
                than LibTorch, the reason being that the combination of in-place
                operations with Mabor-Compute brings near optimality for static graphs.
              </p>
              <p>
                On the other hand, our strategy is still too simplistic to perform
                optimally in the dynamic setting. However, it's still significantly
                more efficient than in our previous version, and almost on par with
                LibTorch if we use the right configuration.
              </p>
              <h2>Autotune</h2>
              <p>
                Now, let us explain the autotune mechanism of Mabor-Compute, which is
                quite independant of the memory management but still within <code>Mabor-Compute</code> as it can be used
                transparently on any in-house
                backend. When calling <code>Execute_autotune</code> on the Compute Client,
                it first goes through the Tuner struct, which uses an autotuning mechanism
                for choosing which kernel should be executed. Then, other <code>Compute Client</code> commands are run
                depending on the decisions of the Tuner.
              </p>
              <p>
                The concept of autotuning is rather simple. Suppose you have access to
                different kernels (or one kernel but with different parameter
                combinations) that all achieve the same results, albeit at different
                computing speeds. You will want to use the fastest, but which is it?
                Some kernels may outperform the others on small inputs but be very
                slow on large inputs. Furthermore, some may be faster only on specific
                hardware, making it impossible to have a fixed kernel selection
                strategy that works for everyone. Autotuning is about finding the
                fastest kernel in any setting, simply by benchmarking all the
                possibilities first. For more details, you may refer to
                <span class="reference px-1">[<!--$--><a class="hover:text-[#69b8e1]"
                    href="#reference-8">8</a><!--/-->]</span>.
              </p>
              <p>
                This is a very dynamic and general strategy, but it comes at the cost
                of some computational overhead for all users. Most of the difficulty
                in implementing autotune comes from minimizing this overhead.
              </p>
              <p>
                One obvious strategy is to use a cache for reusing the fastest kernels
                in already seen settings, without doing the benchmarking again.
                However, using a cache means it must be in a mutable environment. Then
                why did we choose to leave the tuner on the client side rather than on
                the server side, which is designed to be mutable, imposing the use of
                another mutex? It is because the server works at a lower level of
                abstraction than the tuner. On the server side, it would have needed
                to take the handles logic of the memory management into account,
                giving it very little flexibility. Simply by being on the client side,
                it is able to benchmark complex operations that may be composed of
                several kernels.
              </p>
              <p>
                We will not delve deeper into the autotune mechanism for now. Because
                it is closely linked to other interesting concepts, such as matrix
                multiplication algorithms and their benchmarks, we prefer to dedicate
                a full blog post to it in the near future.
              </p>
              <h2>Conclusion</h2>
              <p>
                It has now become very straightforward to create a new backend from
                scratch. It suffices to implement a Compute Server, a storage struct
                and computation kernels to automatically benefit from clever memory
                management, asynchronous execution of the kernels, and autotuning. One
                of our hopes is that any independent chip manufacturer may write a
                backend for their hardware and have everything in hand to be
                competitive.
              </p>
            </div> <!--/--><!--$-->
            <div>
              <h2>References</h2><!--$-->
              <div>
                <div id="reference-1"><span class="pr-2 font-light font-serif leading-7 tracking-wide">[<a
                      class="text-[#69b8e1] hover:font-bold" href="../cross-platform-gpu-backend/index.htm"
                      target="_blank">1</a>]</span><span class="font-light font-serif">Mabor's New Cross-Platform GPU
                    Backend</span></div>
                <div id="reference-2"><span class="pr-2 font-light font-serif leading-7 tracking-wide">[<a
                      class="text-[#69b8e1] hover:font-bold" href="../burn-rusty-approach-to-tensor-handling/index.htm"
                      target="_blank">2</a>]</span><span class="font-light font-serif">Reduced Memory Usage: Mabor's
                    Rusty Approach to Tensor Handling</span></div>
                <div id="reference-3"><span class="pr-2 font-light font-serif leading-7 tracking-wide">[<a
                      class="text-[#69b8e1] hover:font-bold" href="https://pytorch.org/cppdocs/"
                      target="_blank">3</a>]</span><span class="font-light font-serif">LibTorch Documentation</span>
                </div>
                <div id="reference-4"><span class="pr-2 font-light font-serif leading-7 tracking-wide">[<a
                      class="text-[#69b8e1] hover:font-bold" href="https://github.com/huggingface/candle"
                      target="_blank">4</a>]</span><span class="font-light font-serif">Candle GitHub</span></div>
                <div id="reference-5"><span class="pr-2 font-light font-serif leading-7 tracking-wide">[<a
                      class="text-[#69b8e1] hover:font-bold"
                      href="https://github.com/tracel-ai/burn/tree/main/burn-compute" target="_blank">5</a>]</span><span
                    class="font-light font-serif">Mabor-Compute Crate</span></div>
                <div id="reference-6"><span class="pr-2 font-light font-serif leading-7 tracking-wide">[<a
                      class="text-[#69b8e1] hover:font-bold"
                      href="https://d2l.ai/chapter_computational-performance/async-computation.html"
                      target="_blank">6</a>]</span><span class="font-light font-serif">Dive Into Deep Learning:
                    Asynchronous Compution</span></div>
                <div id="reference-7"><span class="pr-2 font-light font-serif leading-7 tracking-wide">[<a
                      class="text-[#69b8e1] hover:font-bold" href="https://docs.rs/wgpu/latest/wgpu/"
                      target="_blank">7</a>]</span><span class="font-light font-serif">WGPU Documentation</span></div>
                <div id="reference-8"><span class="pr-2 font-light font-serif leading-7 tracking-wide">[<a
                      class="text-[#69b8e1] hover:font-bold" href="https://lmzheng.net/posts/2018/10/auto-tune-all"
                      target="_blank">8</a>]</span><span class="font-light font-serif">Lianmin Zheng: Automatic Kernel
                    Optimization for Deep Learning on All Hardware Platforms</span></div>
              </div><!--/-->
            </div><!--/-->
          </div>
        </article>
      </div>
    </div>
  </main>
  <dialog
    class="items-center text-balance rounded-2xl border bg-transparent p-8 text-center backdrop-blur-md backdrop:bg-black/70 max-sm:mx-6 overflow-hidden"
    id="stay-connected-dialog">
    <h2 class="text-v2h2">Join the mailing list</h2>
    <p class="py-4 font-mono text-body"> Join our community! We&#39;d love to keep you in the loop with our newsletter.
    </p>
    <script>(() => { var a = (s, i, o) => { let r = async () => { await (await s())() }, t = typeof i.value == "object" ? i.value : void 0, c = { rootMargin: t == null ? void 0 : t.rootMargin }, n = new IntersectionObserver(e => { for (let l of e) if (l.isIntersecting) { n.disconnect(), r(); break } }, c); for (let e of o.children) n.observe(e) }; (self.Astro || (self.Astro = {})).visible = a; window.dispatchEvent(new Event("astro:visible")); })();</script>
    <astro-island uid="Z1fPhRT" data-solid-render-id="s0" component-url="/_astro/EmailCollector.BqSZQ7nP.js"
      component-export="EmailCollector" renderer-url="/_astro/client.C-0b9Jot.js"
      props="{&quot;website&quot;:[0,&quot;burn&quot;],&quot;inputId&quot;:[0,&quot;stay-connected&quot;],&quot;title&quot;:[0,&quot;Stay connected&quot;],&quot;submitTitle&quot;:[0,&quot;submit email&quot;],&quot;inputLabel&quot;:[0,&quot;email address&quot;],&quot;placeholder&quot;:[0,&quot;your em@il&quot;],&quot;bgAlt&quot;:[0,&quot;stay connected background&quot;],&quot;subscribed&quot;:[0,&quot;subscribed&quot;],&quot;unsubscribed&quot;:[0,&quot;unsubscribed&quot;],&quot;firebaseConfig&quot;:[0,{&quot;apiKey&quot;:[0,&quot;AIzaSyDtXjGAc35AxrqEa8Fdmz3E1sKIX7MfgzU&quot;],&quot;authDomain&quot;:[0,&quot;tracel-website.firebaseapp.com&quot;],&quot;projectId&quot;:[0,&quot;tracel-website&quot;],&quot;storageBucket&quot;:[0,&quot;tracel-website.appspot.com&quot;],&quot;messagingSenderId&quot;:[0,&quot;278977725843&quot;],&quot;appId&quot;:[0,&quot;1:278977725843:web:be459a460a35c455cb9466&quot;]}]}"
      ssr="" client="visible" opts="{&quot;name&quot;:&quot;EmailCollector&quot;,&quot;value&quot;:true}"
      await-children="">
      <form data-hk="s00000" name="stay-connected"><span class="flex items-center rounded-lg gap-2">
          <div class="relative w-full"><input
              class="w-full h-12 flex-1 rounded-md bg-black/20 pl-2 pr-6 text-xs transition-border-duration-700 placeholder:text-primary-content/40 focus:outline-2 border border-primary-content"
              id="stay-connected" placeholder="your em@il" name="email" autocomplete="email" type="email"
              aria-label="email address" required=""><output class="absolute right-5 top-1/2 -translate-y-1/2"
              name="subscribeStatus" for="stay-connected"><svg width="16px" viewbox="2 -11 9 10"
                xmlns="http://www.w3.org/2000/svg">
                <title>unsubscribed</title><text x="0" y="0" class="fill-green-700"></text>
              </svg></output></div><button class="primary-button rounded-md px-2 text-xl h-12 w-20 border border-white"
            title="submit email" type="submit">⇥</button>
        </span></form><!--astro:end-->
    </astro-island>
    <form class="absolute right-0 top-0" method="dialog"> <button class="rounded-md p-4" title="dismiss">
        ✕
      </button> </form>
  </dialog>
  <script>(function () {
      const id = "stay-connected";

      /* eslint-env browser */
      const setupModal = () => {
        if (location.hash === `#${id}`) {
          const dialog = document.getElementById(`${id}-dialog`);
          dialog.addEventListener(
            "close",
            () => {
              history.pushState(
                "",
                document.title,
                window.location.pathname + window.location.search,
              );
            },
            { once: true },
          );

          dialog.addEventListener("click", (e) => {
            const dialogDimensions = dialog.getBoundingClientRect();
            if (
              e.clientX < dialogDimensions.left ||
              e.clientX > dialogDimensions.right ||
              e.clientY < dialogDimensions.top ||
              e.clientY > dialogDimensions.bottom
            ) {
              dialog.close();
            }
          });

          dialog.showModal();
        }
      };

      document.addEventListener("readystatechange", (e) => {
        if (e.target.readyState === "interactive") {
          setupModal();
          window.addEventListener("popstate", setupModal);
        }
      });
    })();</script>
  <div class="flex w-full flex-col items-center gap-8 py-10 text-mid">
    <div class="w-full max-w-[1360px] px-8 md:px-20">
      <div
        class="grid w-full grid-cols-1 gap-8 md:gap-20 [@media(min-width:400px)]:grid-cols-2 [@media(min-width:768px)]:grid-cols-4">
        <div class="flex w-full flex-col text-center [@media(min-width:400px)]:text-left">
          <h3 class="text-nowrap text-h3 text-light">Resources</h3> <a href="../../index.htm"
            class="text-body text-grey-accent hover:text-light"> Home </a><a href="../../get-started/index.htm"
            class="text-body text-grey-accent hover:text-light"> Get Started </a><a
            href="../../benchmarks/community-benchmarks/index.htm" class="text-body text-grey-accent hover:text-light">
            Benchmarks </a><a href="../index.htm" class="text-body text-grey-accent hover:text-light"> Blog </a><a
            href="../../learn/index.htm" class="text-body text-grey-accent hover:text-light"> Learn </a><a
            href="../../docs/burn/index.htm" class="text-body text-grey-accent hover:text-light"> Docs </a>
        </div>
        <div class="flex w-full flex-col text-center [@media(min-width:400px)]:text-left">
          <h3 class="text-nowrap text-h3 text-light">Community</h3> <a href="https://github.com/tracel-ai/burn"
            class="text-body text-grey-accent hover:text-light"> Github </a><a href="https://discord.gg/uPEBbYYDB6"
            class="text-body text-grey-accent hover:text-light"> Discord </a><a href="#stay-connected"
            class="text-body text-grey-accent hover:text-light"> Mailing list </a><a href="https://tracel.ai"
            class="text-body text-grey-accent hover:text-light"> Tracel </a>
        </div>
        <div class="flex w-full flex-col text-center [@media(min-width:400px)]:text-left">
          <h3 class="text-nowrap text-h3 text-light">Projects</h3> <a href="https://crates.io/crates/burn"
            class="text-body text-grey-accent hover:text-light"> Mabor Crate </a><a
            href="https://github.com/tracel-ai/burn" class="text-body text-grey-accent hover:text-light"> Mabor GitHub
          </a><a href="https://crates.io/crates/cubecl" class="text-body text-grey-accent hover:text-light"> CubeCL
            Crate </a><a href="https://github.com/tracel-ai/cubecl" class="text-body text-grey-accent hover:text-light">
            CubeCL GitHub </a>
        </div>
        <div class="flex w-full flex-col text-center [@media(min-width:400px)]:text-left">
          <h3 class="text-nowrap text-h3 text-light">Company</h3> <a href="https://tracel.ai/"
            class="text-body text-grey-accent hover:text-light"> Tracel AI </a><a
            href="https://www.linkedin.com/company/tracel-technologies"
            class="text-body text-grey-accent hover:text-light"> LinkedIn </a><a href="https://x.com/tracel_ai"
            class="text-body text-grey-accent hover:text-light"> X </a>
        </div>
      </div>
    </div>
    <p class="mt-6 text-center font-mono text-b2 text-mid md:flex"> Copyright 2025 © Mabor | Tracel Inc. All rights
      reserved. Design by Perdomo </p>
  </div>
</body>

</html>